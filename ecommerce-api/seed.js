const mongoose = require('mongoose');

// Importamos AMBOS modelos, porque los necesitamos a los dos.
const Product = require('./models/product.js'); // Aseg√∫rate que la ruta sea correcta
const Category = require('./models/category.js'); // Aseg√∫rate que la ruta sea correcta

// ¬°MUY IMPORTANTE! Reemplaza esta URL con la URL de conexi√≥n a TU base de datos.
const dbUrl = 'mongodb://localhost:27017/tuBaseDeDatos';

mongoose.connect(dbUrl)
  .then(() => {
    console.log("‚úÖ ¬°Conexi√≥n a la base de datos establecida para el seeder!");
    seedDB(); // Llamamos a la funci√≥n principal despu√©s de conectar
  })
  .catch(err => {
    console.error("‚ùå ERROR de conexi√≥n a la base de datos:", err);
  });

const seedDB = async () => {
  try {
    // --- FASE 1: BORRAR Y CREAR CATEGOR√çAS ---
    console.log('üóëÔ∏è  Borrando datos antiguos...');
    await Category.deleteMany({});
    await Product.deleteMany({});

    console.log('üå± Creando nuevas categor√≠as...');
    const categories = [
      { name: 'MLB', description: 'Gorras de las Ligas Mayores de B√©isbol.' },
      { name: 'NBA', description: 'Gorras de la Asociaci√≥n Nacional de Baloncesto.' },
      { name: 'LMB', description: 'Gorras de la Liga Mexicana de B√©isbol.' },
      { name: 'Liga MX', description: 'Gorras de la primera divisi√≥n de f√∫tbol mexicano.' },
      { name: 'F1', description: 'Gorras de las escuder√≠as de F√≥rmula 1.' },
      { name: 'NFL', description: 'Gorras de la Liga Nacional de F√∫tbol Americano.' }
    ];
    const createdCategories = await Category.insertMany(categories);
    console.log('‚úÖ Categor√≠as creadas con √©xito.');

    // Creamos un mapa para encontrar f√°cilmente el ID de cada categor√≠a por su nombre
    const categoryMap = createdCategories.reduce((map, category) => {
      map[category.name] = category._id;
      return map;
    }, {});


    // --- FASE 2: ENRIQUECER Y CREAR PRODUCTOS ---
    console.log('üå± Creando nuevos productos...');
    
    // Tomamos tu lista y la enriquecemos con los campos que faltan
    const productsToCreate = [
        {
            name: "Colorado Rockies", price: 799, stock: 15,
            description: "Gorra de los Colorado Rockies MLB, Presenta el logotipo de los Rockies con un detalle floral bordado en los paneles frontales.",
            images: ["assets/img1.png"], brand: "New Era", color: "Negro",
            category: categoryMap['MLB'] // Asignamos el ID de la categor√≠a correcta
        },
        {
            name: "Chicago Cubs", price: 799, stock: 20,
            description: "Gorra de los Chicago Cubs MLB, Presenta el logotipo de los Cubs bordado en los paneles frontales.",
            images: ["assets/img2.png"], brand: "New Era", color: "Azul",
            category: categoryMap['MLB']
        },
        {
            name: "Golden state Warriors", price: 899, stock: 10,
            description: "Gorra de los Golden state Warrios NBA, Presenta el logotipo de los Warrios bordado en los paneles frontales.",
            images: ["assets/img7.png"], brand: "Mitchell & Ness", color: "Azul/Amarillo",
            category: categoryMap['NBA']
        },
        {
            name: "Club America", price: 799, stock: 25,
            description: "Gorra de el Club America Liga MX, Presenta escudo del Club America bordado en los paneles frontales.",
            images: ["assets/img13.png"], brand: "Nike", color: "Amarillo",
            category: categoryMap['Liga MX']
        },
        {
            name: "Red Bull", price: 799, stock: 12,
            description: "Gorra de Red Bull, Presenta el logotipo de Red Bull bordado en los paneles frontales.",
            images: ["assets/img16.png"], brand: "Puma", color: "Azul Marino",
            category: categoryMap['F1']
        }
        // ... Puedes seguir a√±adiendo el resto de tus productos aqu√≠, ya enriquecidos ...
    ];

    await Product.insertMany(productsToCreate);
    console.log('‚úÖ Productos creados con √©xito.');

  } catch (error) {
    console.error('‚ùå Error durante el proceso de siembra:', error);
  } finally {
    // Cerramos la conexi√≥n al final, tanto si hubo √©xito como si hubo error
    console.log('üèÅ Seeder finalizado. Cerrando conexi√≥n.');
    mongoose.connection.close();
  }
};